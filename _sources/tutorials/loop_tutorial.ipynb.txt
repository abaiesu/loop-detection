{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6adb22ba-3b68-4bbc-ae3a-d6b80a8404dc",
   "metadata": {},
   "source": [
    "# Loop Detection Tutorial"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ef23cde7-c0a5-4afb-a0fe-de151878e757",
   "metadata": {},
   "outputs": [],
   "source": [
    "from loop_detection import loop_detection, Range, get_UC\n",
    "from loop_detection.loop_detection_code import get_rule_set, get_aliases\n",
    "from tests.random_generation import create_collection_rules, generate_fw_tables, print_from_fw_tables"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d223de3b-1e3e-4f99-aeed-ebd8678e004d",
   "metadata": {},
   "source": [
    "Take the following fowarding tables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7fabbe77-4418-4a95-a65c-d46e25b5e1b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: [('R1', [1, 5], 1),\n",
       "  ('R2', [1, 4], 1),\n",
       "  ('R3', [0, 1], None),\n",
       "  ('H0', [0, 5], None)],\n",
       " 1: [('R4', [2, 4], 3), ('H1', [0, 5], None)],\n",
       " 2: [('R5', [0, 4], 3), ('H2', [0, 5], None)],\n",
       " 3: [('R5', [2, 3], 1), ('R6', [4, 5], None), ('H3', [0, 5], None)]}"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# each node has a base rule H but the actions for the base rule can differ\n",
    "\n",
    "fw_tables = {i : [] for i in range(4)}\n",
    "\n",
    "fw_tables[0] = [('R1', Range(1,5), 1), \n",
    "                ('R2', Range(1,4), 1), \n",
    "                ('R3', Range(0,1), None),\n",
    "                ('H0', Range(0,5), None)]\n",
    "\n",
    "fw_tables[1] =  [('R4', Range(2,4), 3), \n",
    "                 ('H1', Range(0,5), None)]\n",
    "\n",
    "fw_tables[2] = [('R5', Range(0, 4), 3), \n",
    "                ('H2', Range(0,5), None)]\n",
    "\n",
    "fw_tables[3] =  [('R5', Range(2,3), 1),\n",
    "                 ('R6', Range(4, 5), None), \n",
    "                 ('H3', Range(0,5), None)]\n",
    "\n",
    "fw_tables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "736cfe2e-0545-4f57-b303-2a144bc31b6a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 400x200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print_from_fw_tables(fw_tables)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "865a7436-6d0a-486e-89bc-d296e9c91750",
   "metadata": {},
   "source": [
    "There is a loop between 1 and 3."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5db87eb-a26c-4bd6-a932-7c37817f63cc",
   "metadata": {},
   "source": [
    "Let us check the rule set of the network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c0260192-140a-464c-a860-d4adb5732cfa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'R1': (0, [1, 5], 1, 0),\n",
       " 'R2': (0, [1, 4], 1, 1),\n",
       " 'R3': (0, [0, 1], None, 2),\n",
       " 'H0': (0, [0, 5], None, 3),\n",
       " 'R4': (1, [2, 4], 3, 0),\n",
       " 'H1': (1, [0, 5], None, 1),\n",
       " 'R5': (3, [2, 3], 1, 0),\n",
       " 'H2': (2, [0, 5], None, 1),\n",
       " 'R6': (3, [4, 5], None, 1),\n",
       " 'H3': (3, [0, 5], None, 2)}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rule_set = get_rule_set(fw_tables)\n",
    "rule_set"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9bd0d304-d4cd-4673-a819-365cf9dc7efd",
   "metadata": {},
   "source": [
    "Note that H0, H1, H2, H3 are different names for the same rule (at different locations). \n",
    "\n",
    "\n",
    "Remove such redundant copies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1fc32b02-9a08-44df-aaad-afe86195f0bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{('H0', [0, 5]),\n",
       " ('R1', [1, 5]),\n",
       " ('R2', [1, 4]),\n",
       " ('R3', [0, 1]),\n",
       " ('R4', [2, 4]),\n",
       " ('R5', [2, 3]),\n",
       " ('R6', [4, 5])}"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "aliases = get_aliases(rule_set)\n",
    "R = [(key, values[1]) for key, values in rule_set.items()]\n",
    "unique_count = {key: 0 for key in aliases.keys()}\n",
    "R_set = set()\n",
    "for rule in R:\n",
    "    if unique_count[rule[1]] == 0:\n",
    "        R_set.add(rule)\n",
    "        unique_count[rule[1]] += 1\n",
    "R_set"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07b38826-b6d2-4d0b-8d7d-fd0699b2f4bd",
   "metadata": {},
   "source": [
    "Let us get the uncovered combinations generated by these rules."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "80341179-79a0-4aaf-8118-91d7b62ddb86",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5 atoms :\n",
      "H0 & R3 , value = [0, 1]\n",
      "H0 & R1 & R2 & R4 & R6 , value = [4, 4]\n",
      "H0 & R1 & R2 & R3 , value = [1, 1]\n",
      "H0 & R1 & R2 & R4 & R5 , value = [2, 3]\n",
      "H0 & R1 & R6 , value = [4, 5]\n"
     ]
    }
   ],
   "source": [
    "UC = get_UC(R_set)\n",
    "print(len(UC), 'atoms :')\n",
    "for uc in UC:\n",
    "    print(uc.get_name(),', value =', uc)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8650177-e518-41e8-af9d-a71adbe1fedb",
   "metadata": {},
   "source": [
    "Now, let us run the loop verification."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fac64503-3e9d-42a1-8dbb-7aa5b0838232",
   "metadata": {},
   "outputs": [],
   "source": [
    "result = loop_detection(fw_tables)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d3e2c631-89bc-468c-8f42-272f9f42144f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found a loop\n",
      "Loop followed by: H0 & R1 & R2 & R4 & R5 , value = [2, 3]\n",
      "Nodes involved: {1, 3}\n"
     ]
    }
   ],
   "source": [
    "if len(result) > 0:\n",
    "    print('Found a loop')\n",
    "    for res in result:\n",
    "        print('Loop followed by:',  res[0].get_name(), ', value =', res[0])\n",
    "        nodes_involved = set()\n",
    "        for edge in res[1]:\n",
    "            nodes_involved.add(edge[0])\n",
    "            nodes_involved.add(edge[1])\n",
    "        print('Nodes involved:', nodes_involved)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5696d464-83f0-438d-9dc9-e633f0252292",
   "metadata": {},
   "source": [
    "Now, let's test on a random network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "382a7be3-1e5c-496d-a227-302f6d27e98a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------------------------------------------------------\n",
      "Fowarding table:\n",
      "\n",
      "Node 0\n",
      "('H0', [0, 15], None)\n",
      "('R00', [11, 15], 1)\n",
      "\n",
      "Node 1\n",
      "('H1', [0, 15], None)\n",
      "('R01', [1, 14], 2)\n",
      "\n",
      "Node 2\n",
      "('H2', [0, 15], None)\n",
      "('R02', [1, 4], 0)\n",
      "('R12', [6, 8], 0)\n",
      "('R22', [0, 1], 1)\n",
      "\n",
      "Node 3\n",
      "('H3', [0, 15], None)\n",
      "('R03', [13, 15], 1)\n",
      "('R13', [7, 14], 4)\n",
      "\n",
      "Node 4\n",
      "('H4', [0, 15], None)\n",
      "('R04', [11, 14], 2)\n",
      "('R14', [2, 13], 2)\n",
      "\n",
      "------------------------------------------------------------\n",
      "Graph of the whole network\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------------------------------------------------------\n",
      "1 loops detected\n",
      "\n",
      "Details:\n",
      "\n",
      "Atom: H0 & R01 & R02 & R22 , value = [1, 1]\n",
      "1 loops\n",
      "Nodes involved:\n",
      "Cycle 1 : [1, 2]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "gen_fw_tables = generate_fw_tables(5, max_range = 15)\n",
    "print('-'*60)\n",
    "print('Fowarding table:')\n",
    "print()\n",
    "for key, value in gen_fw_tables.items():\n",
    "    print('Node', key)\n",
    "    for rule in value:\n",
    "        print(rule)\n",
    "    print()\n",
    "print('-'*60)\n",
    "print(\"Graph of the whole network\")\n",
    "print_from_fw_tables(gen_fw_tables)\n",
    "result = loop_detection(gen_fw_tables)\n",
    "print('-'*60)\n",
    "nb_loops = sum(len(res[1]) for res in result)\n",
    "print(nb_loops, 'loops detected')\n",
    "print()\n",
    "print('Details:')\n",
    "print()\n",
    "for res in result:\n",
    "    print('Atom:',  res[0].get_name(), ', value =', res[0])\n",
    "    print(len(res[1]), 'loops')\n",
    "    print('Nodes involved:')\n",
    "    for i, cycle in enumerate(res[1]):\n",
    "        print('Cycle', i + 1 , ':', cycle)\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fc346596-8d6b-435c-95e6-2d5538c9a548",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
